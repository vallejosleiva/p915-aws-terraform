---
# tasks file for openvpn

- name: Get AWS nameserver from instance
  shell: "cat /etc/resolv.conf | grep -i nameserver | head -n1 | cut -d ' ' -f2"
  register: aws_nameserver

- name: Set aws name server as ansible fact
  set_fact:
    aws_nameserver: "{{ aws_nameserver.stdout }}"

# using the include flag will instantly run this yml before continuing. Make sure your order is correct

- include: googleAuth.yml

- name: "Openvpn: Install dependencies."
  apt: name={{ item }} state=present
  with_items:
  - make

- name: Install openvpn
  apt: name=openvpn state=present

- name: Make log directory
  file: path=/etc/openvpn/logs state=directory

- name: Make log file
  file: path=/etc/openvpn/logs/openvpn.log mode=0644 state=touch

- name: Make config directory
  file: path=/etc/openvpn/ state=directory

- name: Make keys directory
  file: path=/etc/openvpn/keys state=directory

# the client cert is still needed to connect but PAM will enforce an extra layer of security
- name: Copying ca cert
  copy:
    src: ../keys/ca.crt
    dest: "{{openvpn_etcdir}}/keys/ca.crt"
    owner: root
    group: root
    mode: 0644

# Commenting out the copying of the keys since PAM authentication will be used instead of keys.
- name: Copying ca key
  copy:
    src: ../keys/ca.key
    dest: "{{openvpn_etcdir}}/keys/ca.key"
    owner: root
    group: root
    mode: 0644

- name: Copying ta key
  copy:
    src: ../keys/ta.key
    dest: "{{openvpn_etcdir}}/keys/ta.key"
    owner: root
    group: root
    mode: 0644

- name: Copying DH file
  copy:
    src: "../keys/dh{{ openvpn_key_size }}.pem"
    dest: "{{openvpn_etcdir}}/keys/dh{{ openvpn_key_size }}.pem"
    owner: root
    group: root
    mode: 0644

- name: Copying server cert
  copy:
    src: ../keys/server.crt
    dest: "{{openvpn_etcdir}}/keys/server.crt"
    owner: root
    group: root
    mode: 0644

- name: Copying server key
  copy:
    src: ../keys/server.key
    dest: "{{openvpn_etcdir}}/keys/server.key"
    owner: root
    group: root
    mode: 0644

- name: Copying server config
  template:
    src: server.j2
    dest: "{{openvpn_etcdir}}/server.conf"
    owner: root
    group: root
    mode: 0644
  with_items:
    - openvpn_subnet
    - aws_nameserver
    
- name: Generate Clients configurations
  template: src=client.conf.j2 dest={{openvpn_keydir}}/{{item}}.ovpn
  with_items: "{{openvpn_clients}}"

- include: pamConfigure.yml

- name: Allow connections on the VPN network interface (tun0)
  command: "iptables -A INPUT -i tun+ -j ACCEPT"

- name: Allow connections on tun+ to be forwarded
  command: "iptables -A FORWARD -i tun+ -j ACCEPT"

- name: Forward packets from tun+ to eth0
  command: "iptables -A FORWARD -i tun+ -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT"

- name: Forward packets from eth0 to tun+
  command: "iptables -A FORWARD -i eth0 -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT"

- name: Allow connections out of the tun+
  command: "iptables -A OUTPUT -o tun+ -j ACCEPT"

- name: Set up NAT
  command: "iptables -t nat -A POSTROUTING -s {{ openvpn_subnet_cidr }} -o eth0 -j MASQUERADE"

- name: Save iptables
  command: "iptables-save"

- name: Setup ipv4 packet forwarding on the server
  lineinfile:
    dest: /etc/sysctl.conf
    line: "net.ipv4.ip_forward=1"

- name: Restart iptables
  service:
    name: ufw
    state: restarted

- name: Run sysctrl
  command: "sysctl -p"

- name: Restart openvpn-server
  service:
    name: openvpn
    state: restarted

- include: tasks/stop_openvpn.yml
